// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: pipeline.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PipelineService_KabKotaPipeline_FullMethodName             = "/tracer_study_grpc.PipelineService/KabKotaPipeline"
	PipelineService_ProvinsiPipeline_FullMethodName            = "/tracer_study_grpc.PipelineService/ProvinsiPipeline"
	PipelineService_ProdiPipeline_FullMethodName               = "/tracer_study_grpc.PipelineService/ProdiPipeline"
	PipelineService_UserStudyPipeline_FullMethodName           = "/tracer_study_grpc.PipelineService/UserStudyPipeline"
	PipelineService_SiakUpdateRespondenPipeline_FullMethodName = "/tracer_study_grpc.PipelineService/SiakUpdateRespondenPipeline"
	PipelineService_RespondenPipeline_FullMethodName           = "/tracer_study_grpc.PipelineService/RespondenPipeline"
	PipelineService_PKTSPipeline_FullMethodName                = "/tracer_study_grpc.PipelineService/PKTSPipeline"
)

// PipelineServiceClient is the client API for PipelineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PipelineServiceClient interface {
	KabKotaPipeline(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PipelineServiceResponse, error)
	ProvinsiPipeline(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PipelineServiceResponse, error)
	ProdiPipeline(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PipelineServiceResponse, error)
	UserStudyPipeline(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PipelineServiceResponse, error)
	SiakUpdateRespondenPipeline(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PipelineServiceResponse, error)
	RespondenPipeline(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PipelineServiceResponse, error)
	PKTSPipeline(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PipelineServiceResponse, error)
}

type pipelineServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPipelineServiceClient(cc grpc.ClientConnInterface) PipelineServiceClient {
	return &pipelineServiceClient{cc}
}

func (c *pipelineServiceClient) KabKotaPipeline(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PipelineServiceResponse, error) {
	out := new(PipelineServiceResponse)
	err := c.cc.Invoke(ctx, PipelineService_KabKotaPipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) ProvinsiPipeline(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PipelineServiceResponse, error) {
	out := new(PipelineServiceResponse)
	err := c.cc.Invoke(ctx, PipelineService_ProvinsiPipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) ProdiPipeline(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PipelineServiceResponse, error) {
	out := new(PipelineServiceResponse)
	err := c.cc.Invoke(ctx, PipelineService_ProdiPipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) UserStudyPipeline(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PipelineServiceResponse, error) {
	out := new(PipelineServiceResponse)
	err := c.cc.Invoke(ctx, PipelineService_UserStudyPipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) SiakUpdateRespondenPipeline(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PipelineServiceResponse, error) {
	out := new(PipelineServiceResponse)
	err := c.cc.Invoke(ctx, PipelineService_SiakUpdateRespondenPipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) RespondenPipeline(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PipelineServiceResponse, error) {
	out := new(PipelineServiceResponse)
	err := c.cc.Invoke(ctx, PipelineService_RespondenPipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pipelineServiceClient) PKTSPipeline(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PipelineServiceResponse, error) {
	out := new(PipelineServiceResponse)
	err := c.cc.Invoke(ctx, PipelineService_PKTSPipeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PipelineServiceServer is the server API for PipelineService service.
// All implementations must embed UnimplementedPipelineServiceServer
// for forward compatibility
type PipelineServiceServer interface {
	KabKotaPipeline(context.Context, *emptypb.Empty) (*PipelineServiceResponse, error)
	ProvinsiPipeline(context.Context, *emptypb.Empty) (*PipelineServiceResponse, error)
	ProdiPipeline(context.Context, *emptypb.Empty) (*PipelineServiceResponse, error)
	UserStudyPipeline(context.Context, *emptypb.Empty) (*PipelineServiceResponse, error)
	SiakUpdateRespondenPipeline(context.Context, *emptypb.Empty) (*PipelineServiceResponse, error)
	RespondenPipeline(context.Context, *emptypb.Empty) (*PipelineServiceResponse, error)
	PKTSPipeline(context.Context, *emptypb.Empty) (*PipelineServiceResponse, error)
	mustEmbedUnimplementedPipelineServiceServer()
}

// UnimplementedPipelineServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPipelineServiceServer struct {
}

func (UnimplementedPipelineServiceServer) KabKotaPipeline(context.Context, *emptypb.Empty) (*PipelineServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KabKotaPipeline not implemented")
}
func (UnimplementedPipelineServiceServer) ProvinsiPipeline(context.Context, *emptypb.Empty) (*PipelineServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProvinsiPipeline not implemented")
}
func (UnimplementedPipelineServiceServer) ProdiPipeline(context.Context, *emptypb.Empty) (*PipelineServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProdiPipeline not implemented")
}
func (UnimplementedPipelineServiceServer) UserStudyPipeline(context.Context, *emptypb.Empty) (*PipelineServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserStudyPipeline not implemented")
}
func (UnimplementedPipelineServiceServer) SiakUpdateRespondenPipeline(context.Context, *emptypb.Empty) (*PipelineServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SiakUpdateRespondenPipeline not implemented")
}
func (UnimplementedPipelineServiceServer) RespondenPipeline(context.Context, *emptypb.Empty) (*PipelineServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RespondenPipeline not implemented")
}
func (UnimplementedPipelineServiceServer) PKTSPipeline(context.Context, *emptypb.Empty) (*PipelineServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PKTSPipeline not implemented")
}
func (UnimplementedPipelineServiceServer) mustEmbedUnimplementedPipelineServiceServer() {}

// UnsafePipelineServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PipelineServiceServer will
// result in compilation errors.
type UnsafePipelineServiceServer interface {
	mustEmbedUnimplementedPipelineServiceServer()
}

func RegisterPipelineServiceServer(s grpc.ServiceRegistrar, srv PipelineServiceServer) {
	s.RegisterService(&PipelineService_ServiceDesc, srv)
}

func _PipelineService_KabKotaPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).KabKotaPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelineService_KabKotaPipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).KabKotaPipeline(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineService_ProvinsiPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).ProvinsiPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelineService_ProvinsiPipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).ProvinsiPipeline(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineService_ProdiPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).ProdiPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelineService_ProdiPipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).ProdiPipeline(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineService_UserStudyPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).UserStudyPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelineService_UserStudyPipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).UserStudyPipeline(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineService_SiakUpdateRespondenPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).SiakUpdateRespondenPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelineService_SiakUpdateRespondenPipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).SiakUpdateRespondenPipeline(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineService_RespondenPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).RespondenPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelineService_RespondenPipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).RespondenPipeline(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PipelineService_PKTSPipeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PipelineServiceServer).PKTSPipeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PipelineService_PKTSPipeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PipelineServiceServer).PKTSPipeline(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// PipelineService_ServiceDesc is the grpc.ServiceDesc for PipelineService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PipelineService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tracer_study_grpc.PipelineService",
	HandlerType: (*PipelineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "KabKotaPipeline",
			Handler:    _PipelineService_KabKotaPipeline_Handler,
		},
		{
			MethodName: "ProvinsiPipeline",
			Handler:    _PipelineService_ProvinsiPipeline_Handler,
		},
		{
			MethodName: "ProdiPipeline",
			Handler:    _PipelineService_ProdiPipeline_Handler,
		},
		{
			MethodName: "UserStudyPipeline",
			Handler:    _PipelineService_UserStudyPipeline_Handler,
		},
		{
			MethodName: "SiakUpdateRespondenPipeline",
			Handler:    _PipelineService_SiakUpdateRespondenPipeline_Handler,
		},
		{
			MethodName: "RespondenPipeline",
			Handler:    _PipelineService_RespondenPipeline_Handler,
		},
		{
			MethodName: "PKTSPipeline",
			Handler:    _PipelineService_PKTSPipeline_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pipeline.proto",
}
